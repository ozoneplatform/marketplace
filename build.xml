<project xmlns:ivy="antlib:org.apache.ivy.ant" name="marketplace-server" default="bundle" basedir=".">
    <property file="${basedir}/application.properties" />
    <import file="build-base.xml" optional="true"/>
    <property name="lib.dir" value="${basedir}/lib" />
    <property name="staging.dir" value="staging" />
    <property name="work.dir" value="${basedir}/${staging.dir}" />
    <property name="tomcat.dir" value="${staging.dir}/apache-tomcat" />

    <path id="task.classpath">
        <fileset dir="${vendor.dir}" includes="**/*.jar" />
    </path>

    <condition property="offline.arg" value="-DOFFLINE_REPO=${offline_repo}" else="">
        <isset property="offline_repo" />
    </condition>

    <!-- For offline building, this path needs to point to a valid location on the local FS
    <echo message="Offline build: ${offline.arg}"/>
    -->

    <condition property="test.output.format" value="-xml" else="-html">
        <or>
            <isset property="hudson.build" />
            <isset property="coverage.xml" />
        </or>
    </condition>

    <condition property="isWindows">
        <os family="windows" />
    </condition>

    <target name="_init-ivy">
        <antcall target="init-ivy" />
    </target>

    <available file="build-base.xml" property="build-base.available" />
    <target name="init-build" >
        <ant dir="." target="init-ivy" inheritall="false" />
    </target>

    <target name="-resolve" description="--> Retrieve dependencies with ivy" depends="_init-ivy">
        <ivy:settings file="${basedir}/${ivysettings.file}" id='ivy.settings' />
        <ivy:resolve settingsRef='ivy.settings' />
        <mkdir dir="${work.dir}" />
    </target>

    <target name="buildInfo" unless="build.number">
        <buildnumber />
    </target>

    <target name="-init" depends="-resolve,buildInfo">
        <tstamp />
        <ivy:info file="ivy.xml" />
    </target>

    <target name="clean" unless="skipWar" description="--> Cleans a Grails application">
        <antcall target="timestamp"/>
        <delete dir="${staging.dir}" />
        <grails script="clean" args="${offline.arg}" />
    </target>

    <target name="about" depends="-init">
        <echo message="!!!! ${build.number}!!!!" />
        <copy file="resources/about.properties" todir="web-app/WEB-INF/classes">
            <filterchain>
                <expandproperties />
            </filterchain>
        </copy>
    </target>

    <target name="compile-themes">

        <!-- Note that this only compiles themes that are in the war. It does not
             compile themes that are in the external themes directory.  That will
             need to be done manually.  (By default there are no external themes) -->

        <uptodate property="compile-themes-in-war.uptodate" >
            <srcfiles dir="${basedir}/web-app/themes" excludes="**/images/**,**/css/**,**/.sass-cache/**" />

            <!-- Look for any source file that is newer than any css file. TODO: make this
                 so that we do not need to hard-code the theme names -->
            <compositemapper>
                <mergemapper to="${basedir}/web-app/themes/gold.theme/css/gold.css" />
                <mergemapper to="${basedir}/web-app/themes/cobalt.theme/css/cobalt.css" />
                <mergemapper to="${basedir}/web-app/themes/gold.theme/css/admin.css" />
            </compositemapper>
        </uptodate>

        <antcall target="_compile-themes-in-war" />

        <!-- make sure sass-cache folders are deleted -->
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${basedir}/web-app/themes" >
                <include name="**/.sass-cache/**"/>
            </fileset>
        </delete>
    </target>

    <!-- Only recompile if compile-themes.uptodate is not set.
         This prevents compilation from happening mulitple times
         per build -->
    <target name="_compile-themes-in-war" unless="compile-themes-in-war.uptodate">
        <exec executable="cmd" dir="${basedir}/web-app/themes" failonerror="true" osfamily="windows">
            <arg value="/c" />
            <arg value="compile_all_themes.bat" />
            <arg value="--force" />
        </exec>
        <exec executable="sh" dir="${basedir}/web-app/themes" failonerror="true" osfamily="unix">
            <arg value="compile_all_themes.sh" />
            <arg value="--force" />
        </exec>
    </target>

    <target name="stage-extras">
        <mkdir dir="${tomcat.dir}" />

        <mkdir dir="${staging.dir}/dbscripts" />
        <zip destfile="${staging.dir}/dbscripts/MktplaceUpgradeScripts.zip" >
            <zipfileset dir="${basedir}/resources">
                <include name="upgradeMarketplace*.sql" />
                <include name="addIndices*.sql" />
            </zipfileset>
        </zip>

        <copy todir="${staging.dir}/dbscripts">
            <fileset dir="${basedir}/resources">
                <include name="*.sql" />
                <exclude name="*LiquibaseScript.sql" />
                <!-- Exclude internal scripts -->
                <exclude name="*owf_properties_fix.sql" />
                <!-- Exclude owf_properties fix  -->
                <exclude name="upgradeMarketplace*.sql" />
                <!-- Exclude marketplace upgrade scripts  -->
                <exclude name="addIndices*.sql" />
                <!-- Exclude addIndices upgrade scripts  -->
            </fileset>
        </copy>

        <mkdir dir="${staging.dir}/javascript" />
        <copy todir="${staging.dir}/javascript/eventing" flatten="true">
            <fileset dir="web-app/vendor/eventing">
                <include name="rpc_relay.uncompressed.html" />
            </fileset>
        </copy>
        <copy todir="${staging.dir}/javascript/dojo-1.2.3-windowname-only">
            <fileset dir="web-app/vendor/dojo-1.2.3-windowname-only" />
        </copy>

        <copy todir="${tomcat.dir}/certs">
            <fileset dir="certs">
                <include name="keystore.jks" />
                <include name="testUser1.p12" />
                <include name="testAdmin1.p12" />
                <include name="ca.crt" />
            </fileset>
        </copy>
        <copy todir="${tomcat.dir}/lib">
            <fileset dir="${basedir}/resources">
                <include name="OzoneConfig.properties" />
                <include name="mp-override-log4j.xml" />
                <include name="users.properties" />
                <include name="MarketplaceConfig.groovy" />
            </fileset>
            <fileset dir="${basedir}/grails-app/conf">
                <include name="ehcache.xml" />
            </fileset>
        </copy>
    </target>

    <!-- =================================
          target: compile
         ================================= -->
    <target name="compile" description="--> Compiles a Grails application">
        <grails script="compile" args="${offline.arg}" />
        <move file="${basedir}/target/${app.name}-${app.version}.war" tofile="${basedir}/target/marketplace.war" />
    </target>

    <!-- =================================
          target: war
         ================================= -->

    <target name="war" depends="-init,clean,test,compress_js" unless="skipWar" description="--> Creates a WAR of a Grails application">
        <grails script="-Dbuild.number=${build.number} war" args="${offline.arg}" />
        <move file="${basedir}/target/${app.name}-${app.version}.war" tofile="${basedir}/target/marketplace.war" />
    </target>

    <!-- =================================
          target: test
         ================================= -->
    <target name="test" unless="no-test" description="--> Run a Grails applications unit tests">
        <antcall target="timestamp"/>
        <!-- Refresh dependencies only to ensure database-migration plugin
             is installed before we run dbm-drop-create. -->
        <grails script="refresh-dependencies" args="${offline.arg}" />
        <grails script="-Dgrails.env=test dbm-drop-create" args="${offline.arg}" />
        <grails script="test-app unit: integration:" args="${test.output.format} ${offline.arg}" />
    </target>

    <target name="export-schemas" if="hudson.build">
        <grails script="-Dgrails.env=with_oracle schema-export" args="${basedir}/resources/oracle_marketplace_schema_only.sql" />
        <grails script="-Dgrails.env=with_mysql schema-export" args="${basedir}/resources/mysql_marketplace_schema_only.sql" />
        <grails script="-Dgrails.env=with_postgres schema-export" args="${basedir}/resources/postgresql_marketplace_schema_only.sql" />
        <grails script="-Dgrails.env=with_sql_server schema-export" args="${basedir}/resources/sqlserver_marketplace_schema_only.sql" />
    </target>

    <target name="run-db-tests" if="hudson.build">
        <antcall target="run-single-db-tests"><param name="db.type" value="mysql"/></antcall>
        <antcall target="run-single-db-tests"><param name="db.type" value="oracle"/></antcall>
        <antcall target="run-single-db-tests"><param name="db.type" value="postgres"/></antcall>
        <antcall target="run-single-db-tests"><param name="db.type" value="sql_server"/></antcall>
    </target>

    <target name="run-single-db-tests">
        <antcall target="timestamp"/>
        <echo message="Running database tests for ${db.type}"/>
        <taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${ant.lib.dir}/ant-contrib-1.0b3.jar" />
        <grails script="-Dgrails.env=with_${db.type} dbm-drop-all"/>

        <if>
            <os family="windows" />
            <then>
                <grails script="-Dgrails.env=with_${db.type} dbm-update &quot;--contexts=create&quot;"/>
            </then>
            <else>
                <grails script="-Dgrails.env=with_${db.type} dbm-update --contexts=create"/>
            </else>
        </if>

        <grails script="-Dgrails.env=with_${db.type} test-app" args="integration:" />
    </target>

    <target name="compress_js" depends="-init">
        <exec executable="node">
            <arg value="web-app/vendor/r.js"/>
            <arg value="-o"/>
            <arg value="build.js"/>
        </exec>
    </target>

    <target name="stage-mp">
        <ivy:retrieve pattern="${staging.dir}/[artifact]-[revision].[ext]" type="zip" />
        <copy file="${basedir}/target/marketplace.war" tofile="${tomcat.dir}/webapps/marketplace.war" />

        <antcall target="stage-security" />
        <antcall target="stage-extras" />

        <copy todir="${staging.dir}">
            <fileset dir="${basedir}" includes="LICENSE.txt,NOTICE.txt,README.txt" />
        </copy>

        <copy todir="${staging.dir}/3rdPartyLicenses">
            <fileset dir="${basedir}/3rdPartyLicenses" />
        </copy>
    </target>

    <target name="stage-security">
        <!-- Rename security project to remove version number for simplicity -->
        <copy file="${staging.dir}/${mp.security.module}-project-${mp.security.rev}.zip"
            tofile="${staging.dir}/${mp.security.module}/${mp.security.module}-project.zip" />

        <unzip src="${staging.dir}/${mp.security.module}-project-${mp.security.rev}.zip"
            dest="${staging.dir}/${mp.security.module}" />

        <copy todir="${staging.dir}/${mp.security.module}">
            <fileset dir="${staging.dir}/${mp.security.module}/src/main/resources/spring" />
        </copy>

        <delete dir="${staging.dir}/${owf.security.module}/ozone-security-3.27" />
        <delete dir="${staging.dir}/${owf.security.module}/src" />

        <copy todir="${tomcat.dir}/lib">
            <fileset dir="${staging.dir}/${mp.security.module}"
                includes="OWFsecurityContext.xml,MPsecurityContext.xml,MetricSecurityContext.xml,users.properties,ozone-security-beans/**" />
        </copy>
    </target>

    <target name="bundle" depends="_init-ivy,war">
        <taskdef resource="net/sf/antcontrib/antlib.xml"
            classpath="${ant.lib.dir}/ant-contrib-1.0b3.jar" />
        <antcall target="timestamp"/>
        <mkdir dir="${staging.dir}" />
        <antcall target="stage-tomcat">
            <param name="bundle.dir" value="${staging.dir}" />
        </antcall>
        <delete file="mktplProdDB.properties"/>
        <delete file="mktplProdDB.script"/>
        <if>
            <os family="windows" />
            <then>
                <grails script="-Dgrails.env=production dbm-drop-create" />
            </then>
            <else>
                <grails script="-Dgrails.env=production dbm-drop-create" />
            </else>
        </if>
        <move file="mktplProdDb.h2.db" todir="${tomcat.dir}" />
        <antcall target="stage-mp" />
        <antcall target="post-bundle-cleanup" />
        <zip destfile="${staging.dir}/${app.bundle.name}-bundle-${app.version}.zip" >
            <zipfileset dir="${staging.dir}" excludes="**/*.sh,docs/**" />
            <zipfileset dir="${staging.dir}" includes="**/*.sh" filemode="744" />
        </zip>
        <!-- Ensure shell scripts are executable (for local dev testing) -->
        <chmod dir="${staging.dir}" perm="+x" includes="**/*.sh"/>
    </target>

    <target name="post-bundle-cleanup">
        <delete file="${staging.dir}/${mp.security.module}-project-${mp.security.rev}.zip" />
        <delete file="${staging.dir}/${tomcat.custom.module}-${tomcat.custom.rev}.zip" />
        <delete dir="js-build" />
    </target>

    <!-- Database Migration targets -->
    <target name="initDBMigration">
        <taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${ant.lib.dir}/ant-contrib-1.0b3.jar" />

        <pathconvert property="app.version.underscore" dirsep="" pathsep="" description="Replace '.' with '_' and assign value to new property">
            <path path="${app.base.version}" description="Original app version with dot notation" />
            <!--Pathconvert will try to add the root directory to the "path", so replace with empty string -->
            <map from="${basedir}" to="" />
            <filtermapper>
                <replacestring from="." to="_" />
            </filtermapper>
        </pathconvert>
        <pathconvert property="app.previous.underscore" dirsep="" pathsep="" description="Replace '.' with '_' and assign value to new property">
            <path path="${app.previous.version}" description="Original app version with dot notation" />
            <!--Pathconvert will try to add the root directory to the "path", so replace with empty string -->
            <map from="${basedir}" to="" />
            <filtermapper>
                <replacestring from="." to="_" />
            </filtermapper>
        </pathconvert>
        <echo message="app.previous.version: ${app.previous.version}" />
		<echo message="app.previous.underscore: ${app.previous.underscore}" />

    </target>

    <target name="generateSingleDatabaseScripts">
        <taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${ant.lib.dir}/ant-contrib-1.0b3.jar" />

        <property name="sql.create.file.suffix" value="Create.sql" />
        <property name="sql.upgrade.file.name" value="${db.name}Upgrade_v${app.previous.version}_v${app.version}.sql" />
        <property name="sql.data-create.file.suffix" value="DefaultData.sql" />

        <delete quiet="true" file="${basedir}/resources/${db.name}${sql.create.file.suffix}" />
        <delete quiet="true" file="${basedir}/resources/${sql.upgrade.file.name}" />
        <delete quiet="true" file="${basedir}/resources/${db.type}LiquibaseScript.sql" />
        <delete quiet="true" file="${basedir}/resources/${db.name}${sql.data-create.file.suffix}" />
        <delete quiet="true" file="${basedir}/resources/${db.name}${sql.data-update.file.suffix}" />

        <grails script="-Dgrails.env=${db.type}_migration dbm-create-scripts" />

        <move file="${basedir}/create.sql" tofile="${basedir}/resources/${db.name}${sql.create.file.suffix}" />
        <move file="${basedir}/internal.sql" tofile="${basedir}/resources/${db.name}LiquibaseScript.sql" />
        <move failonerror="false" file="${basedir}/defaultData.sql" tofile="${basedir}/resources/${db.name}${sql.data-create.file.suffix}" />
        <move failonerror="false" file="${basedir}/upgrade.sql" tofile="${basedir}/resources/${sql.upgrade.file.name}" />
    </target>

    <target name="generateDatabaseScripts" depends="initDBMigration">
        <antcall target="doForAllDatabases">
            <param name="targetName" value="generateSingleDatabaseScripts" />
        </antcall>
    </target>

    <target name="doForAllDatabases">
        <antcall target="${targetName}">
            <param name="db.type" value="mysql" />
            <param name="db.name" value="MySql" />
        </antcall>
        <!-- <antcall target="${targetName}">
            <param name="db.type" value="oracle" />
            <param name="db.name" value="Oracle" />
        </antcall>
        <antcall target="${targetName}">
            <param name="db.type" value="postgresql" />
            <param name="db.name" value="Postgresql" />
        </antcall>
        <antcall target="${targetName}">
            <param name="db.type" value="sqlserver" />
            <param name="db.name" value="SQLServer" />
        </antcall> -->
    </target>

    <target name="timestamp">
        <tstamp>
            <format property="CURRENT_TIME" pattern="MM/dd/yyyy hh:mm:ss aa" locale="en,US"/>
        </tstamp>
        <echo>${CURRENT_TIME}</echo>
    </target>

</project>
